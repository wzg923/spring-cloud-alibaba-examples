#如果启用nacos config，这里配置的相同内容都不会生效，差异性的内容有效，优先级 远程配置> 本地配置
spring:
  cloud:
    nacos:
      discovery:
        server-addr: ${spring.cloud.nacos.config.server-addr}
      locator:
        enabled: true
        lowerCaseServiceId: true
    gateway:
      discovery:      #是否与服务发现组件进行结合，通过 serviceId(必须设置成大写) 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
        locator:      #路由访问方式：http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问（因为服务注册的时候，向注册中心注册时将服务名转成大写的了）。
          enabled: true  #开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router
          lowerCaseServiceId: false  #将请求路径上的服务名配置为小写
      routes:
        - id: demo_route
          uri: http://www.baidu.com
          predicates:
            - Path=/demo/**
          filters:
            - StripPrefix=1
            - RequestTime=true
            - AddRequestHeader=X-Request-Foo,value1
        #- id: hello-service
        #  predicates:
        #    - Path=/hello-service/**
        #  uri: "lb://service-provider"
        #  filters:
        #    - StripPrefix=1

    sentinel:
      transport:
        dashboard: localhost:8080
      eager: true
    #流量控制规则 (FlowRule)
      datasource:
        ds1:
          file:
            file: classpath:flowrule.json
            data-type: json
            rule-type: flow


nacos:
  dataId: gateway_config_json
  group: refresh_config_json

server:
  port: 5008

# 配置输出日志
logging:
  level:
    root: WARN #root日志以WARN级别输出
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG

#开启端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  security:
    enabled: false


#指定您要接入的特定的 AHAS 环境
ahas:
  namespace: default
  #通过公网地域接入时，需要您的证书信息；其他地域不需要证书。
  #证书获取方式：在 AHAS 控制台左侧导航栏，选择流控降级 > 网关流控，选择右上角网关接入，在配置启动参数页签下，找到您的证书信息。
  license: eca5a77fb94f4379a62715608c56a6d7
#自定义您的应用名称，例如 spring-cloud-gateway
project:
  name: spring-cloud-gateway
